#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('back:server');
var http = require('http');
var mongoose = require("mongoose");

// Настройка порта
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

// Создание HTTP сервера
var server = http.createServer(app);

// Настройка MongoDB
const uri = process.env.MONGODB_URI || "mongodb+srv://mitsyukolga:Mm26112010@cluster0.koy4gaf.mongodb.net/musicShop?retryWrites=true&w=majority";

console.log('Attempting to connect to MongoDB...');

// Улучшенная обработка подключения к MongoDB
mongoose.connect(uri, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
  .then(() => {
    console.log('Successfully connected to MongoDB.');

    // Запуск сервера после успешного подключения к БД
    server.listen(port, '0.0.0.0', () => {
      console.log(`Server is running on port ${port}`);
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      console.log('Listening on ' + bind);
    });

    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch((err) => {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  });

// Обработка закрытия приложения
process.on('SIGINT', () => {
  mongoose.connection.close(() => {
    console.log('MongoDB connection closed through app termination');
    process.exit(0);
  });
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Server is listening on ' + bind);
}